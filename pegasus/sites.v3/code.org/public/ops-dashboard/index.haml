---
theme: angular
---
- @page_title = "Districts"


%div{'ng-app' => 'districtsApp', 'ng-view' => ''}

:javascript
  'use strict';

  // Declare app level module which depends on filters, and services
  angular.module('districtsApp', [
    'ngRoute',
    'ngResource',
    'districtsApp.controllers',
    'districtsApp.services'
  ]).config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/',
                        {templateUrl: '/ops-dashboard/districts',
                         controller: 'DistrictsController'});
    $routeProvider.otherwise({redirectTo: '/'});
  }]).config(['$httpProvider', function($httpProvider) {
    // X-Requested-With header required for CSRF requests protected by Rack::Protection::JsonCsrf included by Sinatra.
    // Angular originally set this, but removed it in a breaking change in v1.4 because it is "rarely used in practice":
    // https://github.com/angular/angular.js/commit/3a75b1124d062f64093a90b26630938558909e8d
    $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
  }]);

  // SERVICES
  var services = angular.module('districtsApp.services', []).
      value('version', '0.1');

  services.factory('districtsService', ['$resource',
    function($resource) {
      var District = $resource('/ops/districts/:id', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method: 'GET'},
        //  'save':   {method: 'POST'},
        //  'query':  {method: 'GET', isArray:true},
        //  'remove': {method: 'DELETE'},
        //  'delete': {method: 'DELETE'} // don't use this because it doesn't work in IE9
      });

      return District;
    }]);

  // CONTROLLERS

  var controllers = angular.module('districtsApp.controllers', []).
      value('version', '0.1');

  controllers.controller('DistrictsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'districtsService',
    function($scope, $route, $routeParams, $location, $window, districtsService) {
      $scope.districtsLoaded = false;

      $scope.districts = districtsService.query();

      $scope.save = function () {
        var newDistrict = new districtsService($scope.district);
        newDistrict.$save().then(
          function(saved) {
            $scope.district = saved; /* just in case it has been modified on server */
            districtsService.query().$promise.then(function (districts) {
              $scope.districts = districts;
            });
          }
        );
      }

      $scope.districts.$promise.then(function(districts) {
        $scope.districtsLoaded = true;
      }).catch($scope.genericError);
  }]);
---
theme: angular
---
%div{'ng-app' => 'opsApp', 'ng-view' => ''}

:javascript
  'use strict';

  // Declare app level module which depends on filters, and services
  angular.module('opsApp', [
    'ngRoute',
    'ngResource',
    'opsApp.controllers',
    'opsApp.services'
  ]).config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/',
                        {templateUrl: '/ops-dashboard/landing'});
    $routeProvider.when('/districts',              {templateUrl: '/ops-dashboard/districts', controller: 'DistrictsController'});
    $routeProvider.when('/workshops',              {templateUrl: '/ops-dashboard/workshops', controller: 'WorkshopsController'});
    $routeProvider.when('/cohorts',              {templateUrl: '/ops-dashboard/cohorts', controller: 'CohortsController'});
    $routeProvider.when('/cohorts/new',       {templateUrl: '/ops-dashboard/cohort-edit', controller:  'CohortController'});
    $routeProvider.otherwise({redirectTo: '/'});
  }]).config(['$httpProvider', function($httpProvider) {
    // X-Requested-With header required for CSRF requests protected by Rack::Protection::JsonCsrf included by Sinatra.
    // Angular originally set this, but removed it in a breaking change in v1.4 because it is "rarely used in practice":
    // https://github.com/angular/angular.js/commit/3a75b1124d062f64093a90b26630938558909e8d
    $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
  }]);

  // SERVICES
  var services = angular.module('opsApp.services', []).
      value('version', '0.1');

  services.factory('districtsService', ['$resource',
    function($resource) {
      var District = $resource('/ops/districts/:id', {}, {
        // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
        //  'get':    {method: 'GET'},
        //  'save':   {method: 'POST'},
        //  'query':  {method: 'GET', isArray:true},
        //  'remove': {method: 'DELETE'},
        //  'delete': {method: 'DELETE'} // don't use this because it doesn't work in IE9
        update: {method:'PUT', url: '/ops/districts/:id'}
      });

      return District;
    }]);

  services.factory('workshopsService', ['$resource',
    function($resource){
      var Workshop = $resource('/ops/workshops/:id', {}, {
      // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
      //  'get':    {method:'GET'},
      //  'save':   {method:'POST'},
      //  'query':  {method:'GET', isArray:true},
      //  'remove': {method:'DELETE'},
      //  'delete': {method:'DELETE'}
      update: {method:'PUT', url: '/ops/workshops/:id'}
      });

      return Workshop;
    }]);

  services.factory('cohortsService', ['$resource',
    function($resource){
      var Cohort = $resource('/ops/cohorts/:id', {}, {
      // default methods: see https://code.angularjs.org/1.2.21/docs/api/ngResource/service/$resource
      //  'get':    {method:'GET'},
      //  'save':   {method:'POST'},
      //  'query':  {method:'GET', isArray:true},
      //  'remove': {method:'DELETE'},
      //  'delete': {method:'DELETE'}
      });

      return Cohort;
    }]);

  // CONTROLLERS

  var controllers = angular.module('opsApp.controllers', []).
      value('version', '0.1');

  controllers.controller('DistrictsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'districtsService',
    function($scope, $route, $routeParams, $location, $window, districtsService) {
      $scope.districtsLoaded = false;

      $scope.districts = districtsService.query();

      $scope.save = function (district) {
        if (district.id) {
          var newDistrict = new districtsService($scope.district);
          districtsService.update({id: district.id}, district).$promise.then(
            function(result_district) {
              $scope.districts[$scope.districts.indexOf(district)] = result_district;
                districtsService.query().$promise.then(function (districts) {
                $scope.districts = districts;
              });
            }
          ).catch($scope.genericError);
        } else {
          var newDistrict = new districtsService($scope.district);
          newDistrict.$save().then(
            function(saved) {
              $scope.district = saved; /* just in case it has been modified on server */
              districtsService.query().$promise.then(function (districts) {
                $scope.districts = districts;
              });
            }
          );
        }
      }

      $scope.districts.$promise.then(function(districts) {
        $scope.districtsLoaded = true;
      }).catch($scope.genericError);
  }]);

  controllers.controller('WorkshopsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService) {

      $scope.programs = [{name:"MSS"}, {name:"MSM"}, {name:"ECS"}, {name:"CSP"}];

      $scope.workshopsLoaded = false;

      $scope.workshops = workshopsService.query();
      $scope.cohorts = cohortsService.query();

      $scope.cohortName = function (cohortId) {
        if ($scope.cohorts) {
          var name = "";
          $scope.cohorts.forEach(function (e) {
            if (e.id == cohortId) {
              name = e.name;
            }
          });
          if (name != "") {
            return name;
          }
        }
        return "N/A";
      }

      $scope.save = function (workshop) {
        if (workshop.id) {
          var newWorkshop = new workshopsService($scope.workshop);
          workshopsService.update({id: workshop.id}, workshop).$promise.then(
            function(result_workshop) {
              $scope.workshops[$scope.workshops.indexOf(workshop)] = result_workshop;
                workshopsService.query().$promise.then(function (workshops) {
                $scope.workshops = workshops;
              });
            }
          ).catch($scope.genericError);
        } else {
          var newWorkshop = new workshopsService($scope.workshop);
          newWorkshop.$save().then(
            function(saved) {
              $scope.workshop = saved; /* just in case it has been modified on server */
              workshopsService.query().$promise.then(function (workshops) {
                $scope.workshops = workshops;
              });
            }
          );
        }
      }
    }
  ]);

  controllers.controller('CohortsController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService) {
      $scope.hasCohorts = false;
      $scope.cohorts = cohortsService.query();

      $scope.confirm_delete = function(cohort)
      {
        cohort.confirmDelete = true;
      }

      $scope.del = function(cohort) {
        $scope.cohorts.splice($scope.cohorts.indexOf(cohort), 1); // remove from array
        cohortsService.remove({id: cohort.id}); // service call
        cohort.confirmDelete = false;
      };
    }
  ]);

  controllers.controller('CohortController', ['$scope', '$route', '$routeParams', '$location', '$window', 'workshopsService', 'cohortsService',
    function($scope, $route, $routeParams, $location, $window, workshopsService, cohortsService) {
      if ($routeParams.id) {
        $scope.cohort = cohortsService.get({id: $routeParams.id});
      } else {
        $scope.cohort = {};
      }

      $scope.save = function() {
        if ($scope.cohort.id) { // existing
          $scope.cohort =
            cohortsService.update({id: $scope.cohort.id}, $scope.cohort, function() {
              $location.path("/cohorts");
            });
        } else { // new
          $scope.cohort =
            workshopsService.save($scope.cohort, function() {
              $location.path("/cohorts");
            });
        }
      };

      $scope.cancel_edit = function() {
        $location.path("/cohorts");
      };
    }
  ]);
